  Kubernetes is open source container orchestration platform which is portable and extensible.

Resource - service,deployment are resource in Kubernetes.
Object - from resource created a service or deployment is called object.
e.g kubectl get <resource-name> <obj-name>
-----------------------------------------------------------------------
ref - https://kubernetes.io/blog/2019/07/18/api-deprecations-in-1-16/

------------------------------------------------------------------------
Kubernetes Components -

Control plane -
    kube-apiserver - The API server is the front end for the Kubernetes control plane.
    etcd - Consistent and highly-available key value store used as Kubernetes' backing store for all cluster data.
    kube-scheduler - Control plane component that watches for newly created Pods with no assigned node, and selects a node for them to run on.
    kube-controller - Control plane component that runs controller processes. (i.e Node controller,Job controller,Endpoints controller)

Nodes - (set of worker machines)
    kubelet - An agent that runs on each node in the cluster. It makes sure that containers are running in a Pod.
    kube-proxy - kube-proxy is a network proxy that runs on each node in your cluster.
    Container runtime - The container runtime is the software that is responsible for running containers. (CRI-O)

Addons
    DNS - Cluster DNS is a DNS server, in addition to the other DNS server(s) in your environment, which serves DNS records for Kubernetes services.
    Web UI (Dashboard) - Dashboard is a general purpose, web-based UI for Kubernetes clusters.
    Container Resource Monitoring - records generic time-series metrics about containers in a central database, and provides a UI for browsing that data.
    Cluster-level Logging -  responsible for saving container logs to a central log store with search/browsing interface.

------------------------------------------------------------------------------------
#Pod lifecycle

----------------------------------------------------------------------------------
Namespace - Kubernetes uses namespaces to organize objects in the cluster. You can think of each namespace as a folder that holds a set of objects. By default, the kubectl commandline tool interacts with the default namespace.

Label and selector - Label will attach to app replica of app and selector will create endpoint for app.will identify the app replica in Kubernetes.

NodeSelector - run and start pod on specific node

(https://kubernetes.io/docs/tutorials/kubernetes-basics/expose/expose-intro/)

---------------------------------------------------------
Sequence of Kubernetes Operation -

    Cluster - A Kubernetes Cluster (Control Plane)
        Node - The workers that run applications
            Deployment - instructs Kubernetes how to create and update instances of your application
                Pod - to host your application instance

                    Service - In order for the new deployment to be accessible without using the Proxy, a Service is required.      (LabelSelector is use to expose publicly).Services allow your applications to receive traffic.
                    Service can exposed different way by specifying type

                                ClusterIP (default) - Exposes the Service on an internal IP in the cluster. This type makes the Service only reachable from within the cluster.

                                NodePort - Exposes the Service on the same port of each selected Node in the cluster using NAT. Makes a Service accessible from outside the cluster using <NodeIP>:<NodePort>. Superset of ClusterIP.

                                LoadBalancer - Creates an external load balancer in the current cloud (if supported) and assigns a fixed, external IP to the Service. Superset of NodePort.

                                ExternalName - Maps the Service to the contents of the externalName field (e.g. foo.bar.example.com), by returning a CNAME record with its value.

                        Scaling - changing the number of replicas in a Deployment.Scaling will increase the number of Pods to the new desired state.autoscaling can be done via Kubernetes.

                             rolling updates - allow Deployments' update to take place with zero downtime by incrementally updating Pods instances with new ones. The new Pods will be scheduled on Nodes with available resources.

--------------------------------------------------------------------------------------
Port Sequence
pod (8080) -> cluster -> service to external (30000)
port -> Target Port -> NodePort
---------------------------------------------------------------------------------
Kubernetes Steps

1. Create a Kubernetes cluster
    For single node Cluster is minikube but Cloud based cluster have different mechanismS.
    minikube start - start single node cluster Kubernetes
    kubectl cluster-info - see the cluster information
    kubectl get nodes - see the available nodes in Kubernetes
    kubectl proxy - can create temporary proxy use for debug the resources in Kubernetes
         curl http://localhost:8001/api/v1/namespaces/default/pods/$POD_NAME

2. Deploy an app
    kubectl create deployment <deployment_name> --image=<Image_name> - deploy a app in Kubernetes (will create pod automatically)
    kubectl get deployments - see the deployed app in Kubernetes
    kubectl create pods <pod_name> --image=<image_name> --port=<port_expose> - create a pod

3. Explore your app
    kubectl get - list resources
    kubectl describe - show detailed information about a resource
    kubectl logs <object_name> - print the logs from a container in a pod
    kubectl exec <object_name> -- env - execute a command on a container in a pod directly (--)
    kubectl exec -ti <object_name> -- sh - access bash of pod container
    kubectl attach -it <object_name> - if no terminal is available in pod you can attach running process.

4. Expose your app publicly
    kubectl create services - In order for the new deployment to be accessible without using the Proxy, a Service is required.
    kubectl expose deployment <Deployment_name> --type=<NodePort,ClusterIP,LoadBalancer,ExternalName> --port=<PORT> - expose service on node using port
    kubectl get pods -l app=<Label_Name> - get pod details with labels
    kubectl get services -l app=<Label_Name> - get service details with labels
    kubectl get services - show all service running on Kubernetes
    kubectl label services <service_name> <Label_Name=label> -  can set label to resource as per requirement
    kubectl label pods <object_name> name- = unlabel the object
    kubectl delete services <resource_name> - delete resource from cluster

5. Scale up your app
    kubectl get replicasets - see the current replica set
    kubectl scale deployment <deployment_name> --replicas=<no of replica> - add or reduce the replica of pods

6. Update your app
    kubectl set image <deployment> <deployment_name>=<Image_name> - set update image to deploy in pods Kubernetes will auto update the pods.
    kubectl rollout status deployment <deployment_name> - check the ro;;out status of deployment
    kubectl rollout undo deployment <deployment_name> - revert back pods to old rollout

----------------------------------------------------------------------------------------
kubectl get componentstatuses - check the component of Kubernetes
kubectl get pods --all-namespaces - interact with all namespace at a time use this flag
kubectl get pods --selector="app=bandicoot,ver=2" - get pods with selector
kubectl create namespace <namespace_name> - create namespace for the work
kubectl get pods test-565f5c99dd-pcj6n -o jsonpath --template={.spec.containers[*].volumeMounts[*].mountPath} - accessing json object to reuse in configuration (https://tools.ietf.org/id/draft-goessner-dispatch-jsonpath-00.html)
kubectl edit <resource-name> <obj-name> - direct edit the object field
kubectl apply -f <obj_file> - apply created, updated and deleted object file to cluster
kubectl delete -f <obj_file> - deleted created object
kubectl cp <pod-name>:</path/to/remote/file> </path/to/local/file> - copy data to/from pods
kubectl port-forward <pod-name> <host_port>:<pod_port> - forward network traffic from the local machine to the Pod
kubectl get pods -o wide --selector=app=alpaca,env=prod - using label as a selector with get command
kubectl scale replicasets kuard --replicas=4 - scale replica of pods to 4
kubectl autoscale rs kuard --min=2 --max=5 --cpu-percent=80 - autoscale the resource
kubectl describe nodes - show the nodes details
kubectl create configmap my-config --from-file=conf.txt - create ConfigMaps with this command
kubectl create secret generic kuard-tls --from-file=kuard.crt --from-file=kuard.key - create secret with this cmd
kubectl get clusterroles - get all roles on cluster
kubectl get clusterrolebindings - get all cluster role bindings
kubectl auth can-i create pods - test permission of user and role
kubectl auth reconcile -f <mainfest> - reconsile file

--------------------------------------------------------------------------------
Pod
    apiVersion - Which version of the Kubernetes API you're using to create this object
    kind - What kind of object you want to create (Kubernetes in docker)
    metadata - Data that helps uniquely identify the object, including a name string, UID, and optional namespace
    spec - What state you desire for the object

---------------------------------------------------------------------------
Simple pod object

apiVersion: v1
kind: Pod
metadata:
    name: kurd
spec:
    containers:
        - image: sagar12525/kurd
          name: kurd
           ports:
               - containerPort: 8080
                 name: http
                 protocol: TCP

----------------------------------------------------------------------------
Service Discovery - DNS - kube-proxy

Liveness Probe - Liveness probes are defined per container,which means each container inside a Pod is health-checked separately
Readiness Probe - Readiness describes when a container is ready to serve user requests.
Persisting Data with Volumes - 	If you want to persist data across multiple instances of a Pod, you need to use PersistentVolumes

------------------------------------------------------------------------
Labels - Labels provide identifying metadata for objects. These are fundamental qualities of the object that will be used for grouping, viewing, and operating.
Annotations - Annotations provide a place to store additional metadata for Kubernetes objects with the sole purpose of assisting tools and libraries
Endpoints - applications want to be able to use services without using a cluster IP. This is done with another type of object called an Endpoints object.(internal IPs)
NodePort - have clients connect to a unique port per service
LoadBalancer - cloud resources for each service

-------------------------------------------------------------------------
Ingress - HTTP-based load-balancing system
    Ingress Flow :
    Client -> Cluster (LoadBalancer)-> Ingress -> Service -> Pods

----------------------------------------------------------
Simple ingress object

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: simple-ingress
spec:
  defaultBackend:
    service:
      name: alpaca
      port:
        number: 8080

--------------------------------------------------------------------------
ReplicaSet (on single Node)- acts as a cluster-wide Pod manager, ensuring that the right types and number of Pods are running at all times.

reconciliation loops - desired state to current state (pods)
Simple Replica manifest:

apiVersion: apps/v1
kind: ReplicaSet
metadata:
    name: kuard
spec:
  replicas: 4
  selector:
    matchLabels:
      app: kuard
  template:
    metadata:
      labels:
        app: kuard
        version: "2"
    spec:
      containers:
        - name: kuard
          image: "sagar12525/kurd"
          ports:
            - containerPort: 8080

TO DELETE ONLY DaemonSet USE --cascade=orphan FLAG WITH DELETE.

--------------------------------------------------------------------------------
Deployment - deployments enable you to easily move from one version of your code to the next. This “rollout” process is specifiable and careful.

Simple Deployment mainfest:

apiVersion: apps/v1
kind: Deployment
metadata:
    name: kuard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kuard
  template:
    metadata:
      labels:
        app: kuard
        version: "2"
    spec:
      containers:
        - name: kuard
          image: "sagar12525/kurd"
          ports:
            - containerPort: 8080

strategies supported by deployments -
    Recreate -
		It simply updates the ReplicaSet it manages to use the new image and terminates all of the Pods associated with the deployment.result in some site downtime.should use only in test environment.

    RollingUpdate - you can roll out a new version of your service while it is still receiving user traffic, without any downtime

TO DELETE ONLY Deployment USE --cascade=orphan FLAG WITH DELETE.

---------------------------------------------------------------------------------------
DaemonSets (on every node) - A replicating a pods to different node or every node is need a agent that called DaemonSets.A DaemonSet ensures a copy of a Pod is running across a set of nodes in a Kubernetes cluster.DaemonSets are used to deploy system daemons such as log collectors and monitoring agents.

    ReplicaSet and DaemonSets is same but when to use is different.
    ReplicaSet - ReplicaSets should be used when your application is completely decoupled from the node and you can run multiple copies on a given node without special consideration.

    DaemonSets -DaemonSets should be used when a single copy of your application must run on all or a subset of the nodes in the cluster.

reconciliation loops - desired state (a Pod is present on all nodes) with the current state (is the Pod present on a particular node?).

TO DELETE ONLY DaemonSet USE --cascade=orphan FLAG WITH DELETE.

-------------------------------------------------------------------------------------------
StatefulSets - used to manage stateful applications.

(A stateful app is a program that saves client data from the activities of one session for use in the next session.)

  StatefulSet maintains a sticky identity for each of their Pods.
  provides guarantees about the ordering and uniqueness of these Pods.

-------------------------------------------------------------------------------------------------------------
Jobs - there is often a need to run short-lived, oneoff tasks. The Job object is made for handling these types of tasks.
create a job pod run until successful termination unless Pod will continually restart regardless of its exit code.

Job pattern:
    One shot - A single Pod running once until successful termination eg. Database migrations (create 1 Parallelism 0)
    Parallel fixed completions - One or more Pods running one or more times until reaching a fixed completion count eg. multiple pod use different   (create 1 Parallelism 0)
    Work queue (parallel jobs) - work job queue

--------------------------------------------------------------------------------------------------------------
ConfigMaps - provide configuration information for workloads.store non-confidential data in key-value pairs

Secrets - provide configuration and focused on making sensitive information available to the workload.
    Secrets enable container images to be created without bundling sensitive data. This allows containers to remain portable across environments.

--------------------------------------------------------------------------------------------------------------
Role-Based Access Control (RBAC) - restrict and control the access of the Kubernetes Cluster

    Role (namespace) - set of abstract capabilities (eg. appdev role might represent the ability to create Pods and services)

    RoleBinding (namespace) - assignment of a role to one or more identities. (eg. binding the appdev role to the user identity alice indicates that Alice has the ability to create Pods and services)

    ClusterRole (cluster) - create a role that applies to the entire cluster or limit access to cluster-level resources.

    ClusterRoleBinding (cluster) - create a role that applies to the entire cluster or limit access to cluster-level resources.

    Authentication - provides the identity

    Authorization - permission to execute task

    user identities - actual users of the cluster

    service account identities - created and managed by Kubernetes itself and are generally associated with components running inside the cluster.

    Verbs - describes an action that can be performed on that resource.verbs correspond roughly to HTTP methods.(eg. "create", "delete", "get", "list", "patch", "update", "watch")

Roles:
    cluster-admin role - provides complete access to the entire cluster.
    admin role - provides complete access to a complete namespace.
    edit role - allows an end user to modify things in a namespace.
    view role - allows for read-only access to a namespace.

you modify any built-in cluster role, those modifications are transient. Whenever the API server is restarted (e.g., for an upgrade) your changes will be overwritten.To prevent this from happening, before you make any other modifications you need
to add the rbac.authorization.kubernetes.io/autoupdate annotation with a value of false to the built-in ClusterRole resource.

------------------------------------------------------------------
Role mainfest :

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-and-services
rules:
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]

----------------------------------------------------------------------
RoleBinding:

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: default
  name: pods-and-services
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: alice
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: mydevs
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: pod-and-services

----------------------------------------------------------------------
Volumes -

PersistentVolumes(PV) - piece of storage in the cluster that has been provisioned by an administrator

PersistentVolumeClaims(PVC) - request for storage by a user


Storage Access Modes

	ReadOnlyMany (ROX)  - the volume can be mounted as read-only by many nodes.

	ReadWriteMany (RWX) - the volume can be mounted as read-write by many nodes.

	ReadWriteOnce (RWO) - the volume can be mounted as read-write by a single node. ReadWriteOnce access mode still can allow multiple pods to access the volume when the pods are running on the same node.

	ReadWriteOncePod (RWOP) - the volume can be mounted as read-write by a single Pod. Use ReadWriteOncePod access mode if you want to ensure that only one pod across whole cluster can read that PVC or write to it. This is only supported for CSI volumes and Kubernetes version 1.22+.

--------------------------------------------------------------------------
Create Kubernetes Cluster with kubeadm.
https://www.youtube.com/watch?v=cAZ5nkLfL6M
